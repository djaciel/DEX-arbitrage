/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ActionStruct = {
  router_a: PromiseOrValue<string>;
  router_b: PromiseOrValue<string>;
  token_a: PromiseOrValue<string>;
  token_b: PromiseOrValue<string>;
  token_c: PromiseOrValue<string>;
  path_a: PromiseOrValue<string>[];
  path_b: PromiseOrValue<string>[];
  path_c: PromiseOrValue<string>[];
  amountIn: PromiseOrValue<BigNumberish>;
};

export type ActionStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string[],
  string[],
  string[],
  BigNumber
] & {
  router_a: string;
  router_b: string;
  token_a: string;
  token_b: string;
  token_c: string;
  path_a: string[];
  path_b: string[];
  path_c: string[];
  amountIn: BigNumber;
};

export interface ArbitrageInterface extends utils.Interface {
  functions: {
    "performArbitrage((address,address,address,address,address,address[],address[],address[],uint256))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "performArbitrage"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "performArbitrage",
    values: [ActionStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "performArbitrage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Arbitrage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    performArbitrage(
      action: ActionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  performArbitrage(
    action: ActionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    performArbitrage(
      action: ActionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    performArbitrage(
      action: ActionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    performArbitrage(
      action: ActionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
