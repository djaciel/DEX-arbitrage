/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Arbitrage, ArbitrageInterface } from "../../contracts/Arbitrage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "Quote",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "approveTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_a",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_b",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "path_a",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_b",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_c",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountToken_a",
            type: "uint256",
          },
        ],
        internalType: "struct Arbitrage.ActionQuote",
        name: "actionQuote",
        type: "tuple",
      },
    ],
    name: "getAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "pancakeCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_a",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_b",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Pair",
            name: "pair",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_a",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_b",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_c",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "path_a",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_b",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_c",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountToken_a",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToPay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Arbitrage.Action",
        name: "_action",
        type: "tuple",
      },
    ],
    name: "performArbitrage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV2Call",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612477806200010e6000396000f3fe6080604052600436106100865760003560e01c8063848008121161005957806384800812146101245780638da5cb5b14610140578063961310491461016b578063c224337914610194578063f2fde38b146101bd57610086565b806310d1e85c1461008b57806361621344146100a75780636270d510146100e4578063715018a61461010d575b600080fd5b6100a560048036038101906100a0919061119b565b6101e6565b005b3480156100b357600080fd5b506100ce60048036038101906100c991906114ae565b610214565b6040516100db91906115b5565b60405180910390f35b3480156100f057600080fd5b5061010b600480360381019061010691906115fc565b610520565b005b34801561011957600080fd5b5061012261073b565b005b61013e6004803603810190610139919061119b565b61074f565b005b34801561014c57600080fd5b5061015561077d565b6040516101629190611654565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d919061166f565b6107a6565b005b3480156101a057600080fd5b506101bb60048036038101906101b691906116f2565b6108c7565b005b3480156101c957600080fd5b506101e460048036038101906101df919061166f565b6109cb565b005b60008414806101f55750600083145b61020257610201611752565b5b61020c8282610a4f565b505050505050565b60606000600367ffffffffffffffff81111561023357610232611239565b5b6040519080825280602002602001820160405280156102615781602001602082028036833780820191505090505b509050826000015173ffffffffffffffffffffffffffffffffffffffff1663d06ca61f8460a0015185604001516040518363ffffffff1660e01b81526004016102ab92919061184e565b60006040518083038186803b1580156102c357600080fd5b505afa1580156102d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103009190611956565b6001815181106103135761031261199f565b5b60200260200101518160008151811061032f5761032e61199f565b5b602002602001018181525050826020015173ffffffffffffffffffffffffffffffffffffffff1663d06ca61f8260008151811061036f5761036e61199f565b5b602002602001015185606001516040518363ffffffff1660e01b815260040161039992919061184e565b60006040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103ee9190611956565b6001815181106104015761040061199f565b5b60200260200101518160018151811061041d5761041c61199f565b5b602002602001018181525050826000015173ffffffffffffffffffffffffffffffffffffffff1663d06ca61f8260018151811061045d5761045c61199f565b5b602002602001015185608001516040518363ffffffff1660e01b815260040161048792919061184e565b60006040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104dc9190611956565b6001815181106104ef576104ee61199f565b5b60200260200101518160028151811061050b5761050a61199f565b5b60200260200101818152505080915050919050565b60008160400160208101906105359190611a0c565b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561057a57600080fd5b505afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190611a4e565b90506000826040516020016105c79190611dc6565b60405160208183030381529060405290508260600160208101906105eb919061166f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106ac578260400160208101906106319190611a0c565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f846101200135600030856040518563ffffffff1660e01b81526004016106759493929190611eab565b600060405180830381600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b50505050610736565b8260400160208101906106bf9190611a0c565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600085610120013530856040518563ffffffff1660e01b81526004016107039493929190611ef7565b600060405180830381600087803b15801561071d57600080fd5b505af1158015610731573d6000803e3d6000fd5b505050505b505050565b610743610f44565b61074d6000610fc2565b565b600084148061075e5750600083145b61076b5761076a611752565b5b6107758282610a4f565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107ae610f44565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108049190611654565b60206040518083038186803b15801561081c57600080fd5b505afa158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190611f43565b6040518363ffffffff1660e01b8152600401610871929190611f70565b602060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190611fd1565b5050565b6108cf610f44565b60005b838390508110156109c5578383828181106108f0576108ef61199f565b5b9050602002016020810190610905919061166f565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161095f929190611f70565b602060405180830381600087803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190611fd1565b5080806109bd9061202d565b9150506108d2565b50505050565b6109d3610f44565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3a906120f9565b60405180910390fd5b610a4c81610fc2565b50565b6000808383810190610a61919061228f565b905060006040518060c00160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff1681526020018360c0015181526020018360e001518152602001836101000151815260200183610120015181525090506000610ae582610214565b90506060836000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee83600081518110610b1d57610b1c61199f565b5b60200260200101518661012001518760c00151308961016001516040518663ffffffff1660e01b8152600401610b579594939291906122d8565b600060405180830381600087803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bae9190611956565b90507f775de62829f721d788722b2be1fe795e11540a8740b2236dfc8d8ae3d897d3088460c0015182604051610be5929190612332565b60405180910390a1836020015173ffffffffffffffffffffffffffffffffffffffff16638803dbee83600181518110610c2157610c2061199f565b5b602002602001015184600081518110610c3d57610c3c61199f565b5b60200260200101518760e00151308961016001516040518663ffffffff1660e01b8152600401610c719594939291906122d8565b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610c9f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cc89190611956565b90507f775de62829f721d788722b2be1fe795e11540a8740b2236dfc8d8ae3d897d3088460e0015182604051610cff929190612332565b60405180910390a1836000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee83600281518110610d3b57610d3a61199f565b5b602002602001015184600181518110610d5757610d5661199f565b5b6020026020010151876101000151308961016001516040518663ffffffff1660e01b8152600401610d8c9594939291906122d8565b600060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610de39190611956565b90507f775de62829f721d788722b2be1fe795e11540a8740b2236dfc8d8ae3d897d30884610100015182604051610e1b929190612332565b60405180910390a183610140015181600181518110610e3d57610e3c61199f565b5b602002602001015111610e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7c906123b5565b60405180910390fd5b836060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338661014001516040518363ffffffff1660e01b8152600401610ec9929190611f70565b602060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190611fd1565b5080600181518110610f3057610f2f61199f565b5b602002602001015194505050505092915050565b610f4c611086565b73ffffffffffffffffffffffffffffffffffffffff16610f6a61077d565b73ffffffffffffffffffffffffffffffffffffffff1614610fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb790612421565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110cd826110a2565b9050919050565b6110dd816110c2565b81146110e857600080fd5b50565b6000813590506110fa816110d4565b92915050565b6000819050919050565b61111381611100565b811461111e57600080fd5b50565b6000813590506111308161110a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261115b5761115a611136565b5b8235905067ffffffffffffffff8111156111785761117761113b565b5b60208301915083600182028301111561119457611193611140565b5b9250929050565b6000806000806000608086880312156111b7576111b6611098565b5b60006111c5888289016110eb565b95505060206111d688828901611121565b94505060406111e788828901611121565b935050606086013567ffffffffffffffff8111156112085761120761109d565b5b61121488828901611145565b92509250509295509295909350565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61127182611228565b810181811067ffffffffffffffff821117156112905761128f611239565b5b80604052505050565b60006112a361108e565b90506112af8282611268565b919050565b600080fd5b60006112c4826110c2565b9050919050565b6112d4816112b9565b81146112df57600080fd5b50565b6000813590506112f1816112cb565b92915050565b600067ffffffffffffffff82111561131257611311611239565b5b602082029050602081019050919050565b6000611336611331846112f7565b611299565b9050808382526020820190506020840283018581111561135957611358611140565b5b835b81811015611382578061136e88826110eb565b84526020840193505060208101905061135b565b5050509392505050565b600082601f8301126113a1576113a0611136565b5b81356113b1848260208601611323565b91505092915050565b600060c082840312156113d0576113cf611223565b5b6113da60c0611299565b905060006113ea848285016112e2565b60008301525060206113fe848285016112e2565b602083015250604082013567ffffffffffffffff811115611422576114216112b4565b5b61142e8482850161138c565b604083015250606082013567ffffffffffffffff811115611452576114516112b4565b5b61145e8482850161138c565b606083015250608082013567ffffffffffffffff811115611482576114816112b4565b5b61148e8482850161138c565b60808301525060a06114a284828501611121565b60a08301525092915050565b6000602082840312156114c4576114c3611098565b5b600082013567ffffffffffffffff8111156114e2576114e161109d565b5b6114ee848285016113ba565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61152c81611100565b82525050565b600061153e8383611523565b60208301905092915050565b6000602082019050919050565b6000611562826114f7565b61156c8185611502565b935061157783611513565b8060005b838110156115a857815161158f8882611532565b975061159a8361154a565b92505060018101905061157b565b5085935050505092915050565b600060208201905081810360008301526115cf8184611557565b905092915050565b600080fd5b600061018082840312156115f3576115f26115d7565b5b81905092915050565b60006020828403121561161257611611611098565b5b600082013567ffffffffffffffff8111156116305761162f61109d565b5b61163c848285016115dc565b91505092915050565b61164e816110c2565b82525050565b60006020820190506116696000830184611645565b92915050565b60006020828403121561168557611684611098565b5b6000611693848285016110eb565b91505092915050565b60008083601f8401126116b2576116b1611136565b5b8235905067ffffffffffffffff8111156116cf576116ce61113b565b5b6020830191508360208202830111156116eb576116ea611140565b5b9250929050565b60008060006040848603121561170b5761170a611098565b5b600084013567ffffffffffffffff8111156117295761172861109d565b5b6117358682870161169c565b93509350506020611748868287016110eb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b61178a81611100565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6117c5816110c2565b82525050565b60006117d783836117bc565b60208301905092915050565b6000602082019050919050565b60006117fb82611790565b611805818561179b565b9350611810836117ac565b8060005b8381101561184157815161182888826117cb565b9750611833836117e3565b925050600181019050611814565b5085935050505092915050565b60006040820190506118636000830185611781565b818103602083015261187581846117f0565b90509392505050565b600067ffffffffffffffff82111561189957611898611239565b5b602082029050602081019050919050565b6000815190506118b98161110a565b92915050565b60006118d26118cd8461187e565b611299565b905080838252602082019050602084028301858111156118f5576118f4611140565b5b835b8181101561191e578061190a88826118aa565b8452602084019350506020810190506118f7565b5050509392505050565b600082601f83011261193d5761193c611136565b5b815161194d8482602086016118bf565b91505092915050565b60006020828403121561196c5761196b611098565b5b600082015167ffffffffffffffff81111561198a5761198961109d565b5b61199684828501611928565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006119d9826110c2565b9050919050565b6119e9816119ce565b81146119f457600080fd5b50565b600081359050611a06816119e0565b92915050565b600060208284031215611a2257611a21611098565b5b6000611a30848285016119f7565b91505092915050565b600081519050611a48816110d4565b92915050565b600060208284031215611a6457611a63611098565b5b6000611a7284828501611a39565b91505092915050565b6000611a8a60208401846112e2565b905092915050565b6000819050919050565b6000611ab7611ab2611aad846110a2565b611a92565b6110a2565b9050919050565b6000611ac982611a9c565b9050919050565b6000611adb82611abe565b9050919050565b611aeb81611ad0565b82525050565b6000611b0060208401846119f7565b905092915050565b6000611b1382611abe565b9050919050565b611b2381611b08565b82525050565b6000611b3860208401846110eb565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611b6c57611b6b611b4a565b5b83810192508235915060208301925067ffffffffffffffff821115611b9457611b93611b40565b5b602082023603841315611baa57611ba9611b45565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b6000602082019050919050565b6000611be68385611bb2565b9350611bf182611bc3565b8060005b85811015611c2a57611c078284611b29565b611c1188826117cb565b9750611c1c83611bcd565b925050600181019050611bf5565b5085925050509392505050565b6000611c466020840184611121565b905092915050565b60006101808301611c626000840184611a7b565b611c6f6000860182611ae2565b50611c7d6020840184611a7b565b611c8a6020860182611ae2565b50611c986040840184611af1565b611ca56040860182611b1a565b50611cb36060840184611b29565b611cc060608601826117bc565b50611cce6080840184611b29565b611cdb60808601826117bc565b50611ce960a0840184611b29565b611cf660a08601826117bc565b50611d0460c0840184611b4f565b85830360c0870152611d17838284611bda565b92505050611d2860e0840184611b4f565b85830360e0870152611d3b838284611bda565b92505050611d4d610100840184611b4f565b858303610100870152611d61838284611bda565b92505050611d73610120840184611c37565b611d81610120860182611523565b50611d90610140840184611c37565b611d9e610140860182611523565b50611dad610160840184611c37565b611dbb610160860182611523565b508091505092915050565b60006020820190508181036000830152611de08184611c4e565b905092915050565b6000819050919050565b6000611e0d611e08611e0384611de8565b611a92565b611100565b9050919050565b611e1d81611df2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e5d578082015181840152602081019050611e42565b83811115611e6c576000848401525b50505050565b6000611e7d82611e23565b611e878185611e2e565b9350611e97818560208601611e3f565b611ea081611228565b840191505092915050565b6000608082019050611ec06000830187611781565b611ecd6020830186611e14565b611eda6040830185611645565b8181036060830152611eec8184611e72565b905095945050505050565b6000608082019050611f0c6000830187611e14565b611f196020830186611781565b611f266040830185611645565b8181036060830152611f388184611e72565b905095945050505050565b600060208284031215611f5957611f58611098565b5b6000611f67848285016118aa565b91505092915050565b6000604082019050611f856000830185611645565b611f926020830184611781565b9392505050565b60008115159050919050565b611fae81611f99565b8114611fb957600080fd5b50565b600081519050611fcb81611fa5565b92915050565b600060208284031215611fe757611fe6611098565b5b6000611ff584828501611fbc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203882611100565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561206b5761206a611ffe565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006120e3602683612076565b91506120ee82612087565b604082019050919050565b60006020820190508181036000830152612112816120d6565b9050919050565b600061018082840312156121305761212f611223565b5b61213b610180611299565b9050600061214b848285016112e2565b600083015250602061215f848285016112e2565b6020830152506040612173848285016119f7565b6040830152506060612187848285016110eb565b606083015250608061219b848285016110eb565b60808301525060a06121af848285016110eb565b60a08301525060c082013567ffffffffffffffff8111156121d3576121d26112b4565b5b6121df8482850161138c565b60c08301525060e082013567ffffffffffffffff811115612203576122026112b4565b5b61220f8482850161138c565b60e08301525061010082013567ffffffffffffffff811115612234576122336112b4565b5b6122408482850161138c565b6101008301525061012061225684828501611121565b6101208301525061014061226c84828501611121565b6101408301525061016061228284828501611121565b6101608301525092915050565b6000602082840312156122a5576122a4611098565b5b600082013567ffffffffffffffff8111156122c3576122c261109d565b5b6122cf84828501612119565b91505092915050565b600060a0820190506122ed6000830188611781565b6122fa6020830187611781565b818103604083015261230c81866117f0565b905061231b6060830185611645565b6123286080830184611781565b9695505050505050565b6000604082019050818103600083015261234c81856117f0565b905081810360208301526123608184611557565b90509392505050565b7f6e6f7420656e6f75676800000000000000000000000000000000000000000000600082015250565b600061239f600a83612076565b91506123aa82612369565b602082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061240b602083612076565b9150612416826123d5565b602082019050919050565b6000602082019050818103600083015261243a816123fe565b905091905056fea2646970667358221220c0efde318ccc5ad2c31af791c6978a9fb889f555a3942091968e8249cf92026064736f6c63430008090033";

type ArbitrageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Arbitrage__factory extends ContractFactory {
  constructor(...args: ArbitrageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Arbitrage> {
    return super.deploy(overrides || {}) as Promise<Arbitrage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Arbitrage {
    return super.attach(address) as Arbitrage;
  }
  override connect(signer: Signer): Arbitrage__factory {
    return super.connect(signer) as Arbitrage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrageInterface {
    return new utils.Interface(_abi) as ArbitrageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Arbitrage {
    return new Contract(address, _abi, signerOrProvider) as Arbitrage;
  }
}
