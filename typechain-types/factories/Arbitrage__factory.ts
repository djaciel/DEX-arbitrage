/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Arbitrage, ArbitrageInterface } from "../Arbitrage";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_a",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_b",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_a",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_b",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_c",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "path_a",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_b",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_c",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
        ],
        internalType: "struct Action",
        name: "action",
        type: "tuple",
      },
    ],
    name: "performArbitrage",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610999806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635446fee014610030575b600080fd5b61004a600480360381019061004591906103f4565b610060565b6040516100579190610505565b60405180910390f35b60606000600367ffffffffffffffff81111561007f5761007e610527565b5b6040519080825280602002602001820160405280156100ad5781602001602082028036833780820191505090505b5090508260000160208101906100c391906105c6565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f846101000135858060a001906100f49190610602565b6040518463ffffffff1660e01b815260040161011293929190610763565b60006040518083038186803b15801561012a57600080fd5b505afa15801561013e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061016791906108eb565b60018151811061017a57610179610934565b5b60200260200101518160008151811061019657610195610934565b5b6020026020010181815250508260200160208101906101b591906105c6565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f826000815181106101e4576101e3610934565b5b6020026020010151858060c001906101fc9190610602565b6040518463ffffffff1660e01b815260040161021a93929190610763565b60006040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061026f91906108eb565b60018151811061028257610281610934565b5b60200260200101518160018151811061029e5761029d610934565b5b6020026020010181815250508260000160208101906102bd91906105c6565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f826001815181106102ec576102eb610934565b5b6020026020010151858060e001906103049190610602565b6040518463ffffffff1660e01b815260040161032293929190610763565b60006040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061037791906108eb565b60018151811061038a57610389610934565b5b6020026020010151816002815181106103a6576103a5610934565b5b60200260200101818152505080915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600061012082840312156103eb576103ea6103cf565b5b81905092915050565b60006020828403121561040a576104096103c5565b5b600082013567ffffffffffffffff811115610428576104276103ca565b5b610434848285016103d4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61047c81610469565b82525050565b600061048e8383610473565b60208301905092915050565b6000602082019050919050565b60006104b28261043d565b6104bc8185610448565b93506104c783610459565b8060005b838110156104f85781516104df8882610482565b97506104ea8361049a565b9250506001810190506104cb565b5085935050505092915050565b6000602082019050818103600083015261051f81846104a7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061058182610556565b9050919050565b600061059382610576565b9050919050565b6105a381610588565b81146105ae57600080fd5b50565b6000813590506105c08161059a565b92915050565b6000602082840312156105dc576105db6103c5565b5b60006105ea848285016105b1565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261061f5761061e6105f3565b5b80840192508235915067ffffffffffffffff821115610641576106406105f8565b5b60208301925060208202360383131561065d5761065c6105fd565b5b509250929050565b61066e81610469565b82525050565b600082825260208201905092915050565b6000819050919050565b61069881610576565b82525050565b60006106aa838361068f565b60208301905092915050565b6106bf81610576565b81146106ca57600080fd5b50565b6000813590506106dc816106b6565b92915050565b60006106f160208401846106cd565b905092915050565b6000602082019050919050565b60006107128385610674565b935061071d82610685565b8060005b858110156107565761073382846106e2565b61073d888261069e565b9750610748836106f9565b925050600181019050610721565b5085925050509392505050565b60006040820190506107786000830186610665565b818103602083015261078b818486610706565b9050949350505050565b600080fd5b6000601f19601f8301169050919050565b6107b48261079a565b810181811067ffffffffffffffff821117156107d3576107d2610527565b5b80604052505050565b60006107e66103bb565b90506107f282826107ab565b919050565b600067ffffffffffffffff82111561081257610811610527565b5b602082029050602081019050919050565b600080fd5b61083181610469565b811461083c57600080fd5b50565b60008151905061084e81610828565b92915050565b6000610867610862846107f7565b6107dc565b9050808382526020820190506020840283018581111561088a57610889610823565b5b835b818110156108b3578061089f888261083f565b84526020840193505060208101905061088c565b5050509392505050565b600082601f8301126108d2576108d1610795565b5b81516108e2848260208601610854565b91505092915050565b600060208284031215610901576109006103c5565b5b600082015167ffffffffffffffff81111561091f5761091e6103ca565b5b61092b848285016108bd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212203bedd43a49920e0fa767a08e0028519161270771925915a4094eaf83dcd1e34e64736f6c63430008090033";

type ArbitrageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Arbitrage__factory extends ContractFactory {
  constructor(...args: ArbitrageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Arbitrage> {
    return super.deploy(overrides || {}) as Promise<Arbitrage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Arbitrage {
    return super.attach(address) as Arbitrage;
  }
  override connect(signer: Signer): Arbitrage__factory {
    return super.connect(signer) as Arbitrage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrageInterface {
    return new utils.Interface(_abi) as ArbitrageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Arbitrage {
    return new Contract(address, _abi, signerOrProvider) as Arbitrage;
  }
}
