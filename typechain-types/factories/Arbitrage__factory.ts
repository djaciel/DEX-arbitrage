/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Arbitrage, ArbitrageInterface } from "../Arbitrage";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_a",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_b",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Pair",
            name: "pair",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_a",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_b",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_c",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "path_a",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_b",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_c",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountToAsk",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToPay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Action",
        name: "action",
        type: "tuple",
      },
    ],
    name: "getAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "pancakeCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_a",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Router02",
            name: "router_b",
            type: "address",
          },
          {
            internalType: "contract IUniswapV2Pair",
            name: "pair",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_a",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_b",
            type: "address",
          },
          {
            internalType: "address",
            name: "token_c",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "path_a",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_b",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "path_c",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountToAsk",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToPay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Action",
        name: "_action",
        type: "tuple",
      },
    ],
    name: "performArbitrage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506116a2806100206000396000f3fe6080604052600436106100345760003560e01c80636270d5101461003957806364f6121014610062578063848008121461009f575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610739565b6100bb565b005b34801561006e57600080fd5b5061008960048036038101906100849190610739565b6102d6565b604051610096919061084a565b60405180910390f35b6100b960048036038101906100b4919061095b565b610632565b005b60008160400160208101906100d09190610a21565b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d9190610a63565b90506000826040516020016101629190610e40565b60405160208183030381529060405290508260600160208101906101869190610e62565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610247578260400160208101906101cc9190610a21565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f846101200135600030856040518563ffffffff1660e01b81526004016102109493929190610f81565b600060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b505050506102d1565b82604001602081019061025a9190610a21565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600085610120013530856040518563ffffffff1660e01b815260040161029e9493929190610fcd565b600060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b505050505b505050565b60606000600367ffffffffffffffff8111156102f5576102f4611019565b5b6040519080825280602002602001820160405280156103235781602001602082028036833780820191505090505b5090508260000160208101906103399190611048565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f846101200135858060c0019061036a9190611084565b6040518463ffffffff1660e01b815260040161038893929190611155565b60006040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103dd91906112ab565b6001815181106103f0576103ef6112f4565b5b60200260200101518160008151811061040c5761040b6112f4565b5b60200260200101818152505082602001602081019061042b9190611048565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f8260008151811061045a576104596112f4565b5b6020026020010151858060e001906104729190611084565b6040518463ffffffff1660e01b815260040161049093929190611155565b60006040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104e591906112ab565b6001815181106104f8576104f76112f4565b5b602002602001015181600181518110610514576105136112f4565b5b6020026020010181815250508260000160208101906105339190611048565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f82600181518110610562576105616112f4565b5b60200260200101518580610100019061057b9190611084565b6040518463ffffffff1660e01b815260040161059993929190611155565b60006040518083038186803b1580156105b157600080fd5b505afa1580156105c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105ee91906112ab565b600181518110610601576106006112f4565b5b60200260200101518160028151811061061d5761061c6112f4565b5b60200260200101818152505080915050919050565b60008414806106415750600083145b61064e5761064d611323565b5b6000828281019061065f9190611595565b9050806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338361014001516040518363ffffffff1660e01b81526004016106a59291906115de565b602060405180830381600087803b1580156106bf57600080fd5b505af11580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f7919061163f565b50505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600061018082840312156107305761072f610714565b5b81905092915050565b60006020828403121561074f5761074e61070a565b5b600082013567ffffffffffffffff81111561076d5761076c61070f565b5b61077984828501610719565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6107c1816107ae565b82525050565b60006107d383836107b8565b60208301905092915050565b6000602082019050919050565b60006107f782610782565b610801818561078d565b935061080c8361079e565b8060005b8381101561083d57815161082488826107c7565b975061082f836107df565b925050600181019050610810565b5085935050505092915050565b6000602082019050818103600083015261086481846107ec565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108978261086c565b9050919050565b6108a78161088c565b81146108b257600080fd5b50565b6000813590506108c48161089e565b92915050565b6108d3816107ae565b81146108de57600080fd5b50565b6000813590506108f0816108ca565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261091b5761091a6108f6565b5b8235905067ffffffffffffffff811115610938576109376108fb565b5b60208301915083600182028301111561095457610953610900565b5b9250929050565b6000806000806000608086880312156109775761097661070a565b5b6000610985888289016108b5565b9550506020610996888289016108e1565b94505060406109a7888289016108e1565b935050606086013567ffffffffffffffff8111156109c8576109c761070f565b5b6109d488828901610905565b92509250509295509295909350565b60006109ee8261088c565b9050919050565b6109fe816109e3565b8114610a0957600080fd5b50565b600081359050610a1b816109f5565b92915050565b600060208284031215610a3757610a3661070a565b5b6000610a4584828501610a0c565b91505092915050565b600081519050610a5d8161089e565b92915050565b600060208284031215610a7957610a7861070a565b5b6000610a8784828501610a4e565b91505092915050565b6000610a9b8261088c565b9050919050565b610aab81610a90565b8114610ab657600080fd5b50565b600081359050610ac881610aa2565b92915050565b6000610add6020840184610ab9565b905092915050565b6000819050919050565b6000610b0a610b05610b008461086c565b610ae5565b61086c565b9050919050565b6000610b1c82610aef565b9050919050565b6000610b2e82610b11565b9050919050565b610b3e81610b23565b82525050565b6000610b536020840184610a0c565b905092915050565b6000610b6682610b11565b9050919050565b610b7681610b5b565b82525050565b6000610b8b60208401846108b5565b905092915050565b610b9c8161088c565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610bce57610bcd610bac565b5b83810192508235915060208301925067ffffffffffffffff821115610bf657610bf5610ba2565b5b602082023603841315610c0c57610c0b610ba7565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b6000610c3b8383610b93565b60208301905092915050565b6000602082019050919050565b6000610c608385610c14565b9350610c6b82610c25565b8060005b85811015610ca457610c818284610b7c565b610c8b8882610c2f565b9750610c9683610c47565b925050600181019050610c6f565b5085925050509392505050565b6000610cc060208401846108e1565b905092915050565b60006101808301610cdc6000840184610ace565b610ce96000860182610b35565b50610cf76020840184610ace565b610d046020860182610b35565b50610d126040840184610b44565b610d1f6040860182610b6d565b50610d2d6060840184610b7c565b610d3a6060860182610b93565b50610d486080840184610b7c565b610d556080860182610b93565b50610d6360a0840184610b7c565b610d7060a0860182610b93565b50610d7e60c0840184610bb1565b85830360c0870152610d91838284610c54565b92505050610da260e0840184610bb1565b85830360e0870152610db5838284610c54565b92505050610dc7610100840184610bb1565b858303610100870152610ddb838284610c54565b92505050610ded610120840184610cb1565b610dfb6101208601826107b8565b50610e0a610140840184610cb1565b610e186101408601826107b8565b50610e27610160840184610cb1565b610e356101608601826107b8565b508091505092915050565b60006020820190508181036000830152610e5a8184610cc8565b905092915050565b600060208284031215610e7857610e7761070a565b5b6000610e86848285016108b5565b91505092915050565b610e98816107ae565b82525050565b6000819050919050565b6000610ec3610ebe610eb984610e9e565b610ae5565b6107ae565b9050919050565b610ed381610ea8565b82525050565b610ee28161088c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f22578082015181840152602081019050610f07565b83811115610f31576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f5382610ee8565b610f5d8185610ef3565b9350610f6d818560208601610f04565b610f7681610f37565b840191505092915050565b6000608082019050610f966000830187610e8f565b610fa36020830186610eca565b610fb06040830185610ed9565b8181036060830152610fc28184610f48565b905095945050505050565b6000608082019050610fe26000830187610eca565b610fef6020830186610e8f565b610ffc6040830185610ed9565b818103606083015261100e8184610f48565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561105e5761105d61070a565b5b600061106c84828501610ab9565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126110a1576110a0611075565b5b80840192508235915067ffffffffffffffff8211156110c3576110c261107a565b5b6020830192506020820236038313156110df576110de61107f565b5b509250929050565b600082825260208201905092915050565b600061110483856110e7565b935061110f82610c25565b8060005b85811015611148576111258284610b7c565b61112f8882610c2f565b975061113a83610c47565b925050600181019050611113565b5085925050509392505050565b600060408201905061116a6000830186610e8f565b818103602083015261117d8184866110f8565b9050949350505050565b61119082610f37565b810181811067ffffffffffffffff821117156111af576111ae611019565b5b80604052505050565b60006111c2610700565b90506111ce8282611187565b919050565b600067ffffffffffffffff8211156111ee576111ed611019565b5b602082029050602081019050919050565b60008151905061120e816108ca565b92915050565b6000611227611222846111d3565b6111b8565b9050808382526020820190506020840283018581111561124a57611249610900565b5b835b81811015611273578061125f88826111ff565b84526020840193505060208101905061124c565b5050509392505050565b600082601f830112611292576112916108f6565b5b81516112a2848260208601611214565b91505092915050565b6000602082840312156112c1576112c061070a565b5b600082015167ffffffffffffffff8111156112df576112de61070f565b5b6112eb8482850161127d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561137757611376611019565b5b602082029050602081019050919050565b600061139b6113968461135c565b6111b8565b905080838252602082019050602084028301858111156113be576113bd610900565b5b835b818110156113e757806113d388826108b5565b8452602084019350506020810190506113c0565b5050509392505050565b600082601f830112611406576114056108f6565b5b8135611416848260208601611388565b91505092915050565b6000610180828403121561143657611435611352565b5b6114416101806111b8565b9050600061145184828501610ab9565b600083015250602061146584828501610ab9565b602083015250604061147984828501610a0c565b604083015250606061148d848285016108b5565b60608301525060806114a1848285016108b5565b60808301525060a06114b5848285016108b5565b60a08301525060c082013567ffffffffffffffff8111156114d9576114d8611357565b5b6114e5848285016113f1565b60c08301525060e082013567ffffffffffffffff81111561150957611508611357565b5b611515848285016113f1565b60e08301525061010082013567ffffffffffffffff81111561153a57611539611357565b5b611546848285016113f1565b6101008301525061012061155c848285016108e1565b61012083015250610140611572848285016108e1565b61014083015250610160611588848285016108e1565b6101608301525092915050565b6000602082840312156115ab576115aa61070a565b5b600082013567ffffffffffffffff8111156115c9576115c861070f565b5b6115d58482850161141f565b91505092915050565b60006040820190506115f36000830185610ed9565b6116006020830184610e8f565b9392505050565b60008115159050919050565b61161c81611607565b811461162757600080fd5b50565b60008151905061163981611613565b92915050565b6000602082840312156116555761165461070a565b5b60006116638482850161162a565b9150509291505056fea26469706673582212204e5f39ff88cf3c0f697bfe4bddc7a6b45c90ac2d36b9214932f440a52f87541064736f6c63430008090033";

type ArbitrageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Arbitrage__factory extends ContractFactory {
  constructor(...args: ArbitrageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Arbitrage> {
    return super.deploy(overrides || {}) as Promise<Arbitrage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Arbitrage {
    return super.attach(address) as Arbitrage;
  }
  override connect(signer: Signer): Arbitrage__factory {
    return super.connect(signer) as Arbitrage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrageInterface {
    return new utils.Interface(_abi) as ArbitrageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Arbitrage {
    return new Contract(address, _abi, signerOrProvider) as Arbitrage;
  }
}
